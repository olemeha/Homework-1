/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.iit.cs445.spring22;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.jupiter.api.Test;

public class AppTests {

  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;

  @Before
  public void setUpStreams() {
    System.setOut(new PrintStream(outContent));
  }

  @After
  public void restoreStreams() {
    System.setOut(originalOut);
  }
  //Ant Test
  @Test
  public void testMoveforAnt() {
    Ant ant = new Ant("Redhead");
    ant.move();
    assertEquals("Redhead Ant is crawling around.\n", outContent.toString());
  }
  
  //Bat Test
  @Test
  public void testMoveforBat() {
    Bat bat = new Bat("Redhead");
    bat.move();
    assertEquals("Redhead Bat is swooping through the dark.\n", outContent.toString());
  }

  @Test
  public void testFlyforBat() {
    Bat bat = new Bat("Redhead");
    bat.fly();
    assertEquals("Redhead Bat is swooping through the dark.\n", outContent.toString());
  }

  @Test
  public void testEatforBat() {
    Bat bat = new Bat("Redhead");
    Thing aThing = new Thing("Banana");
    bat.eat(aThing);
    assertEquals("Redhead Bat won't eat a Banana.\n", outContent.toString());

    outContent.reset();

    Fly fly = new Fly("red");
    bat.eat(fly);
    assertEquals("Redhead Bat has just eaten a red Fly\n", outContent.toString());
  }
  
  //CreatureTest
  @Test
  public void testEatforCreature() {
    Creature creature = new Creature("Redhead") {
      @Override
      public void move() {}
    };

    creature.whatDidYouEat();
    assertEquals("Redhead  has had nothing to eat!\n", outContent.toString());
    outContent.reset();

    creature.eat(new Thing("Banana"));
    assertEquals("Redhead  has just eaten a Banana\n", outContent.toString());
    creature.eat(new Thing("Apple"));
    outContent.reset();

    creature.whatDidYouEat();
    assertEquals("Redhead  has eaten a Apple!\n", outContent.toString());
    outContent.reset();
  }
  
  //FlyTest
  @Test
  public void testMoveforFly() {
    Fly fly = new Fly("Redhead");
    fly.move();
    assertEquals("Redhead Fly is buzzing around in flight.\n", outContent.toString());
  }

  @Test
  public void testFly() {
    Fly fly = new Fly("Redhead");
    fly.fly();
    assertEquals("Redhead Fly is buzzing around in flight.\n", outContent.toString());
  }

  @Test
  public void testEatforFly() {
    Fly fly = new Fly("Redhead");
    Thing aThing = new Thing("Banana");
    fly.eat(aThing);
    assertEquals("Redhead Fly has just eaten a Banana\n", outContent.toString());

    outContent.reset();

    Bat bat = new Bat("red");
    fly.eat(bat);
    assertEquals("Redhead Fly won't eat a red Bat.\n", outContent.toString());
  }
  
  //ThingTest
  @Test
  public void testMoveforThing() {
    Thing thing = new Thing("Banana");
    assertEquals("Banana", thing.toString());
  }
  
  //TigetTest
  @Test
  public void testMoveforTiger() {
    Tiger tiger = new Tiger("Simba");
    tiger.move();
    assertEquals("Simba Tiger has just pounced.\n", outContent.toString());
  }
}
